{"ast":null,"code":"'use strict';\n\nlet MapGenerator = require('./map-generator');\n\nlet stringify = require('./stringify');\n\nlet warnOnce = require('./warn-once');\n\nlet parse = require('./parse');\n\nconst Result = require('./result');\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    this.stringified = false;\n    this._processor = processor;\n    this._css = css;\n    this._opts = opts;\n    this._map = undefined;\n    let root;\n    let str = stringify;\n    this.result = new Result(this._processor, root, this._opts);\n    this.result.css = css;\n    let self = this;\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root;\n      }\n\n    });\n\n    if (this._opts.map) {\n      let map = new MapGenerator(str, root, this._opts, css);\n      let [generatedCSS, generatedMap] = map.generate();\n\n      if (generatedCSS) {\n        this.result.css = generatedCSS;\n      }\n\n      if (generatedMap) {\n        this.result.map = generatedMap;\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult';\n  }\n\n  get processor() {\n    return this.result.processor;\n  }\n\n  get opts() {\n    return this.result.opts;\n  }\n\n  get css() {\n    return this.result.css;\n  }\n\n  get content() {\n    return this.result.css;\n  }\n\n  get map() {\n    return this.result.map;\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root;\n    }\n\n    let root;\n    let parser = parse;\n\n    try {\n      root = parser(this._css, this._opts);\n    } catch (error) {\n      this.error = error;\n    }\n\n    this._root = root;\n    return root;\n  }\n\n  get messages() {\n    return [];\n  }\n\n  warnings() {\n    return [];\n  }\n\n  toString() {\n    return this._css;\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce('Without `from` option PostCSS could generate wrong source map ' + 'and will not find Browserslist config. Set it to CSS file path ' + 'or to `undefined` to prevent this warning.');\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected);\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected);\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally);\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error);\n    return Promise.resolve(this.result);\n  }\n\n  sync() {\n    if (this.error) throw this.error;\n    return this.result;\n  }\n\n}\n\nmodule.exports = NoWorkResult;\nNoWorkResult.default = NoWorkResult;","map":{"version":3,"sources":["/Users/Joel/Desktop/react-projects/movie-app/node_modules/postcss/lib/no-work-result.js"],"names":["MapGenerator","require","stringify","warnOnce","parse","Result","NoWorkResult","constructor","processor","css","opts","stringified","_processor","_css","_opts","_map","undefined","root","str","result","self","Object","defineProperty","get","map","generatedCSS","generatedMap","generate","Symbol","toStringTag","content","_root","parser","error","messages","warnings","toString","then","onFulfilled","onRejected","process","env","NODE_ENV","async","catch","finally","onFinally","Promise","reject","resolve","sync","module","exports","default"],"mappings":"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","sourcesContent":["'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    if (this._opts.map) {\n      let map = new MapGenerator(str, root, this._opts, css)\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    this._root = root\n\n    return root\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n"]},"metadata":{},"sourceType":"script"}